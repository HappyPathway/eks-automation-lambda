name: Build Lambda Container

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: CSVD/aws-auth@main
        id: aws_auth
        with:
          ecs: true

      - name: Terraform Init and Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.aws_auth.outputs.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.aws_auth.outputs.aws_secret_access_key }}
          AWS_SESSION_TOKEN: ${{ steps.aws_auth.outputs.aws_session_token }}
        working-directory: ./infrastructure
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Package Source Code
        run: |
          zip -r source.zip . -x ".git/*" ".github/*" "infrastructure/*"

      - name: Upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.aws_auth.outputs.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.aws_auth.outputs.aws_secret_access_key }}
          AWS_SESSION_TOKEN: ${{ steps.aws_auth.outputs.aws_session_token }}
        run: |
          BUCKET_NAME=$(cd infrastructure && terraform output -raw codebuild_source_bucket)
          aws s3 cp source.zip s3://${BUCKET_NAME}/source.zip

      - name: Start CodeBuild Project
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.aws_auth.outputs.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.aws_auth.outputs.aws_secret_access_key }}
          AWS_SESSION_TOKEN: ${{ steps.aws_auth.outputs.aws_session_token }}
        run: |
          BUILD_ID=$(aws codebuild start-build --project-name eks-automation-lambda-builder --output text --query 'build.id')
          echo "Started build with ID: $BUILD_ID"
          
          while true; do
            STATUS=$(aws codebuild batch-get-builds --ids $BUILD_ID --query 'builds[0].buildStatus' --output text)
            echo "Build status: $STATUS"
            
            if [ "$STATUS" = "SUCCEEDED" ]; then
              echo "Build completed successfully!"
              exit 0
            elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "STOPPED" ] || [ "$STATUS" = "TIMED_OUT" ]; then
              echo "Build failed with status: $STATUS"
              exit 1
            fi
            
            sleep 30
          done
